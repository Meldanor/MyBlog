---
import type {
  CodeBlock,
  HeadingBlock,
  ImageBlock,
  ListBlock,
  ParagraphBlock,
  QuoteBlock,
  RichContentBlock
} from '../../interfaces/rich_content';
import CodeElement from './CodeElement.astro';
import HeadingBlockElement from './HeadingBlockElement.astro';
import ImageElement from './ImageElement.astro';
import ListElement from './ListElement.astro';
import ParagraphElement from './ParagraphElement.astro';
import QuoteElement from './QuoteElement.astro';

interface Props {
  blocks: RichContentBlock[];
}

const { blocks } = Astro.props;
---

{
  blocks.map((block: RichContentBlock) => {
    switch (block.type) {
      case 'heading':
        return <HeadingBlockElement block={block as HeadingBlock} />;
      case 'paragraph':
        return <ParagraphElement block={block as ParagraphBlock} />;
      case 'list':
        return <ListElement block={block as ListBlock} />;
      case 'code':
        return <CodeElement block={block as CodeBlock} />;
      case 'image':
        return <ImageElement block={block as ImageBlock} />;
      case 'quote':
        return <QuoteElement block={block as QuoteBlock} />;
      default:
        throw 'Unhandled block type ' + block.type;
    }
  })
}
